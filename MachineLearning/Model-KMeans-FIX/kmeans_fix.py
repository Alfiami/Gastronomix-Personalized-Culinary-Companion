# -*- coding: utf-8 -*-
"""KMeans_Fix

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nfSW2ngq6yKMAD8Gk_NvBaIuO4wTjcLD
"""

import pandas as pd
import numpy as np
import re
from sklearn.preprocessing import MinMaxScaler
from sklearn.cluster import KMeans
import joblib
from flask import Flask, request, jsonify

app = Flask(__name__)

# Baca dataset (asumsi dataset sudah ada)
data = pd.read_excel('Dataset+Harga.xlsx')

# Pengguna mengisi informasi pribadi
nama = input("Masukkan nama Anda: ")
jenis_kelamin = input("Masukkan jenis kelamin (L/P): ")
tinggi_badan = float(input("Masukkan tinggi badan Anda (cm): "))
berat_badan = float(input("Masukkan berat badan Anda (kg): "))
alergi = input("Apakah Anda memiliki alergi makanan? (Y/N): ")

# Pengguna menginput budget makanan dan berat badan tujuan
budget_makan = float(input("Masukkan budget makanan Anda: "))
berat_badan_tujuan = float(input("Masukkan berat badan tujuan Anda (kg): "))

#Perhitungan Kebutuhan Kalori Harian
kebutuhan_kalori = 15.3 * berat_badan + 679
# Menyesuaikan kebutuhan kalori dengan budget yang telah diinput
kebutuhan_kalori = kebutuhan_kalori * (berat_badan_tujuan / berat_badan)

# Filter alergi (sama seperti sebelumnya)
def filter_alergi(data, alergi_makanan):
    for alergi in alergi_makanan:
        regex = re.compile(r'\b' + re.escape(alergi) + r'\b', flags=re.IGNORECASE)
        data = [item for item in data if not regex.search(item)]
    return data

if alergi.upper() == 'Y':
    jumlah_alergi = int(input("Masukkan jumlah alergi makanan: "))
    alergi_makanan = []
    for i in range(jumlah_alergi):
        alergi = input(f"Masukkan jenis makanan alergi ke-{i+1}: ")
        alergi_makanan.append(alergi)
    data = filter_alergi(data, alergi_makanan)

X = data[['energi_(kal)', 'Harga (Rp)']]

# # Scaling data
# scaler = MinMaxScaler()
# scaled_data = scaler.fit_transform(X)

kmeans = KMeans(n_clusters=7)
kmeans.fit(X)

# Simpan model KMeans ke dalam file
joblib.dump(kmeans, 'model_kmeans.pkl')

@app.route('/recommend_food', methods=['POST'])
def recommend_food():
    data = request.json
    berat_badan = data['berat_badan']
    berat_badan_tujuan = data['berat_badan_tujuan']
    budget_makan = data['budget_makan']

    # Menghitung kebutuhan kalori berdasarkan rumus yang diberikan
    kebutuhan_kalori = (15.3 * berat_badan + 679) * (berat_badan_tujuan / berat_badan)

    # Melakukan prediksi cluster berdasarkan input
    cluster = kmeans.predict([[kebutuhan_kalori, budget_makan]])[0]
    cluster_data = data[kmeans.labels_ == cluster]
    recommended_foods = cluster_data[['makanan', 'jenis', 'energi_(kal)',
                                      'air_(g)', 'protein_(g)', 'lemak_(g)',
                                      'karbohidrat_(g)', 'serat_(g)', 'Harga (Rp)']].values.tolist()

    # Membuat rekomendasi dari setiap jenis makanan
    jenis_makanan = ['makanan pokok', 'makanan tambahan', 'lauk', 'susu', 'sayur', 'buah']
    recommended_foods_list = []

    basic_recommendations = {
        'makanan pokok': 'Nasi Merah',
        'makanan tambahan': 'Keripik Tempe',
        'lauk': 'Tahu Telur',
        'sayur': 'Bayam Kukus',
        'buah': 'Semangka, segar',
        'susu': 'Susu sapi, segar'
    }

    # Memilih satu makanan dari setiap jenis (atau rekomendasi dasar)
    for jenis in jenis_makanan:
        jenis_data = data[data['jenis'] == jenis]['makanan'].tolist()
        if len(jenis_data) > 0:
            recommended_food = np.random.choice(jenis_data)
            recommended_foods_list.append(recommended_food)
        else:
            recommended_foods_list.append(basic_recommendations[jenis])

    return jsonify({
        "recommended_foods": recommended_foods,
        "jenis_makanan": jenis_makanan,
        "kebutuhan_kalori": kebutuhan_kalori
    })

if __name__ == '__main__':
    app.run(debug=True)

