# -*- coding: utf-8 -*-
"""BIRCH-Rec

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16Fz43JHCD9OBE1yd901pL927zayd44rt
"""

import pandas as pd
import numpy as np
from sklearn.preprocessing import OneHotEncoder, LabelEncoder, MinMaxScaler, StandardScaler
from sklearn.cluster import KMeans, MiniBatchKMeans, Birch
import tensorflow as tf
import re

df = pd.read_excel('Dataset+Harga.xlsx', sheet_name = 'Dataset (Gizi + Harga)')

df.info()

df.nunique()

#Get info from the dataframe
variables = []
dtypes = []
count = []
unique = []
missing = []

for item in df.columns:
    variables.append(item)
    dtypes.append(df[item].dtype)
    count.append(len(df[item]))
    unique.append(len(df[item].unique()))
    missing.append(df[item].isna().sum())

output = pd.DataFrame({
    'variable': variables,
    'dtype': dtypes,
    'count': count,
    'unique': unique,
    'missing': missing,

})

output

df['jenis'].value_counts()

df.head()

df.tail()

df.sort_values(by='energi_(kal)', ascending=False)

df.sort_values(by='protein_(g)', ascending=False)

#Find correlation between each column
df.corr()

data = df[['makanan', 'jenis', 'energi_(kal)', 'Harga (Rp)']]

data

# le = LabelEncoder()
# data['jenis'] = le.fit_transform(data['jenis'])

# # Buat dictionary untuk mapping
# mapping = {'susu': 1, 'buah': 2, 'sayur': 3, 'makanan_tambahan': 4, 'lauk':5, 'makanan_pokok':6}

# # Ganti nilai kategorikal dengan angka yang ditentukan
# data['jenis'] = data['jenis'].replace(mapping)

data

# Pengguna mengisi informasi pribadi
nama = input("Masukkan nama Anda: ")
jenis_kelamin = input("Masukkan jenis kelamin (L/P): ")
tinggi_badan = float(input("Masukkan tinggi badan Anda (cm): "))
berat_badan = float(input("Masukkan berat badan Anda (kg): "))
alergi = input("Apakah Anda memiliki alergi makanan? (Y/N): ")

# Pengguna menginput budget makanan dan berat badan tujuan
budget_makan = float(input("Masukkan budget makanan Anda: "))
berat_badan_tujuan = float(input("Masukkan berat badan tujuan Anda (kg): "))

#Perhitungan Kebutuhan Kalori Harian
kebutuhan_kalori = 15.3 * berat_badan + 679
# Menyesuaikan kebutuhan kalori dengan budget yang telah diinput
kebutuhan_kalori = kebutuhan_kalori * (berat_badan_tujuan / berat_badan)

def filter_alergi(data, alergi_makanan):
    for alergi in alergi_makanan:
        regex = re.compile(r'\b' + re.escape(alergi) + r'\b', flags=re.IGNORECASE)
        data = [item for item in data if not regex.search(item)]
    return data

if alergi.upper() == 'Y':
    jumlah_alergi = int(input("Masukkan jumlah alergi makanan: "))
    alergi_makanan = []
    for i in range(jumlah_alergi):
        alergi = input(f"Masukkan jenis makanan alergi ke-{i+1}: ")
        alergi_makanan.append(alergi)
    data = filter_alergi(data, alergi_makanan)

X = df[['energi_(kal)', 'Harga (Rp)']]

# Scaling data
scaler = MinMaxScaler()
scaled_data = scaler.fit_transform(X)

features = scaled_data[:, [0, 1]]
# features = df[['energi_(kal)', 'Harga (Rp)']].values

birch = Birch(n_clusters=7)
birch.fit(X)
# birch.fit(features)

model = tf.keras.Sequential([
    tf.keras.layers.Dense(64, activation='relu', input_shape=(2,)),
    tf.keras.layers.Dense(32, activation='relu'),
    tf.keras.layers.Dense(16, activation='relu'),
    tf.keras.layers.Dense(7, activation='softmax')
])

model.compile(tf.keras.optimizers.Adam(learning_rate=0.0001),
              loss='sparse_categorical_crossentropy', metrics=['accuracy'])
labels = birch.labels_
model.fit(features, labels, epochs=1000, batch_size=128)

# Saving the model in .h5 format
model.save('recommendation_model_birch.h5')

# Convert the model to TensorFlow Lite format (.tflite)
converter = tf.lite.TFLiteConverter.from_keras_model(model)
tflite_model = converter.convert()

# Save the TensorFlow Lite model to a file
with open('recommendation_model_birch.tflite', 'wb') as f:
    f.write(tflite_model)

# Rekomendasi makanan berdasarkan berat badan, berat badan tujuan, dan budget
cluster = birch.predict([[kebutuhan_kalori, budget_makan]])[0]
cluster_data = df[birch.labels_ == cluster]
recommended_foods = cluster_data[['makanan', 'jenis', 'energi_(kal)',
                                  'air_(g)', 'protein_(g)', 'lemak_(g)',
                                  'karbohidrat_(g)', 'serat_(g)', 'Harga (Rp)']].values.tolist()

# Output rekomendasi makanan untuk pengguna
# print("Rekomendasi makanan:")
# for food in recommended_foods:
#     print(f"Makanan: {food[0]}")
#     print(f"Jenis: {food[1]}")
#     print(f"Energi (kal): {food[2]}")
#     print(f"Harga: {food[3]}")
#     print("\n")

# Mendefinisikan setiap jenis makanan
jenis_makanan = ['makanan pokok', 'makanan tambahan', 'lauk', 'susu', 'sayur', 'buah']
recommended_foods = []

basic_recommendations = {
    'makanan pokok': 'Nasi Merah',
    'makanan tambahan': 'Keripik Tempe',
    'lauk': 'Tahu Telur',
    'sayur': 'Bayam Kukus',
    'buah': 'Semangka, segar',
    'susu': 'Susu sapi, segar'
}

# Memilih satu makanan dari setiap jenis
for jenis in jenis_makanan:
    jenis_data = df[df['jenis'] == jenis]['makanan'].tolist()

    # Memilih 1 sampel acak dari setiap jenis makanan (jika tersedia lebih dari 1)
    if len(jenis_data) > 0:
        recommended_food = np.random.choice(jenis_data)
        recommended_foods.append(recommended_food)
    else:
        recommended_foods.append(basic_recommendations[jenis])

# Output rekomendasi makanan
print("Rekomendasi makanan:")
for i, jenis in enumerate(jenis_makanan):
    print(f"{jenis.capitalize()}: {recommended_foods[i]}")

# jenis_makanan = ['makanan pokok', 'makanan tambahan', 'lauk', 'susu', 'sayur', 'buah']
# recommended_foods_high_cal = []
# recommended_foods_low_cal = []

# high_cal_recommendations = {
#     'makanan pokok': 'Nasi Putih',
#     'makanan tambahan': 'Kerupuk udang goreng',
#     'lauk': 'Bebek, daging, goreng',
#     'sayur': 'Cap cai, sayur',
#     'buah': 'Mangga harumanis, segar',
#     'susu': 'Susu kambing, segar'
# }

# low_cal_recommendations = {
#     'makanan pokok': 'Nasi Merah',
#     'makanan tambahan': 'Keripik Tempe',
#     'lauk': 'Tahu Telur',
#     'sayur': 'Bayam Kukus',
#     'buah': 'Semangka, segar',
#     'susu': 'Susu sapi, segar'
# }

# for jenis in jenis_makanan:
#     jenis_data = data[data['jenis'] == jenis]
#     if not jenis_data.empty:
#         max_cal_food = jenis_data[jenis_data['energi_(kal)'] == jenis_data['energi_(kal)'].max()]['makanan'].iloc[0]
#         min_cal_food = jenis_data[jenis_data['energi_(kal)'] == jenis_data['energi_(kal)'].min()]['makanan'].iloc[0]
#         recommended_foods_high_cal.append(high_cal_recommendations[jenis] if max_cal_food == '' else max_cal_food)
#         recommended_foods_low_cal.append(low_cal_recommendations[jenis] if min_cal_food == '' else min_cal_food)
#     else:
#         recommended_foods_high_cal.append(high_cal_recommendations[jenis])
#         recommended_foods_low_cal.append(low_cal_recommendations[jenis])

# print("Rekomendasi makanan dengan kalori tertinggi:")
# for i, jenis in enumerate(jenis_makanan):
#     print(f"{jenis.capitalize()}: {recommended_foods_high_cal[i]}")

# print("\nRekomendasi makanan dengan kalori terendah:")
# for i, jenis in enumerate(jenis_makanan):
#     print(f"{jenis.capitalize()}: {recommended_foods_low_cal[i]}")

# Load the TFLite model and allocate tensors.
interpreter = tf.lite.Interpreter(model_path="recommendation_model_birch.tflite")
interpreter.allocate_tensors()

input_data = np.array([[kebutuhan_kalori, budget_makan]], dtype=np.float32)
input_data = input_data.reshape((1, 2))

input_index = interpreter.get_input_details()[0]["index"]
output_index = interpreter.get_output_details()[0]["index"]

interpreter.set_tensor(input_index, input_data)
interpreter.invoke()

# Mendapatkan hasil prediksi dari model
predictions = interpreter.get_tensor(output_index)

print("Hasil prediksi:")
print(predictions)

# Mendefinisikan rekomendasi makanan berdasarkan klaster
# klaster_rekomendasi = {
#     0: 'Nasi Merah',
#     1: 'Keripik Tempe',
#     2: 'Tahu Telur',
#     3: 'Bayam Kukus',
#     4: 'Semangka, segar',
#     5: 'Susu sapi, segar'
# }

# # Klaster terpilih berdasarkan hasil prediksi
# klaster_terpilih = np.argmax(predictions)

# # Menghubungkan jenis makanan dengan klaster rekomendasi
# jenis_to_klaster = {
#     'makanan pokok': 0,
#     'makanan tambahan': 1,
#     'lauk': 2,
#     'sayur': 3,
#     'buah': 4,
#     'susu': 5
# }

# # Membuat rekomendasi berdasarkan klaster yang dipilih
# recommended_foods = []
# for jenis in jenis_makanan:
#     klaster = jenis_to_klaster[jenis]
#     recommended_foods.append(klaster_rekomendasi[klaster])

# # Output rekomendasi makanan
# print("Rekomendasi makanan:")
# for i, jenis in enumerate(jenis_makanan):
#     print(f"{jenis.capitalize()}: {recommended_foods[i]}")

