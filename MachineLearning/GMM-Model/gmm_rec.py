# -*- coding: utf-8 -*-
"""GMM-Rec

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1neiZrxcG9Q1inMpLQEQ7VCe-bzgthvhT
"""

import pandas as pd
import numpy as np
from sklearn.preprocessing import OneHotEncoder, LabelEncoder, MinMaxScaler, StandardScaler
from sklearn.mixture import GaussianMixture
from sklearn.cluster import KMeans, MiniBatchKMeans, Birch, OPTICS
import tensorflow as tf
import re

df = pd.read_excel('Dataset+Harga.xlsx', sheet_name = 'Dataset (Gizi + Harga)')

df.info()

df.nunique()

#Get info from the dataframe
variables = []
dtypes = []
count = []
unique = []
missing = []

for item in df.columns:
    variables.append(item)
    dtypes.append(df[item].dtype)
    count.append(len(df[item]))
    unique.append(len(df[item].unique()))
    missing.append(df[item].isna().sum())

output = pd.DataFrame({
    'variable': variables,
    'dtype': dtypes,
    'count': count,
    'unique': unique,
    'missing': missing,

})

output

df['jenis'].value_counts()

df.head()

df.tail()

df.sort_values(by='energi_(kal)', ascending=False)

df.sort_values(by='protein_(g)', ascending=False)

#Find correlation between each column
df.corr()

data = df[['makanan', 'jenis', 'energi_(kal)', 'Harga (Rp)']]

data

# le = LabelEncoder()
# data['jenis'] = le.fit_transform(data['jenis'])

# # Buat dictionary untuk mapping
# mapping = {'susu': 1, 'buah': 2, 'sayur': 3, 'makanan_tambahan': 4, 'lauk':5, 'makanan_pokok':6}

# # Ganti nilai kategorikal dengan angka yang ditentukan
# data['jenis'] = data['jenis'].replace(mapping)

data

# Pengguna mengisi informasi pribadi
nama = input("Masukkan nama Anda: ")
jenis_kelamin = input("Masukkan jenis kelamin (L/P): ")
tinggi_badan = float(input("Masukkan tinggi badan Anda (cm): "))
berat_badan = float(input("Masukkan berat badan Anda (kg): "))
alergi = input("Apakah Anda memiliki alergi makanan? (Y/N): ")

# Pengguna menginput budget makanan dan berat badan tujuan
budget_makan = float(input("Masukkan budget makanan Anda: "))
berat_badan_tujuan = float(input("Masukkan berat badan tujuan Anda (kg): "))

#Perhitungan Kebutuhan Kalori Harian
kebutuhan_kalori = 15.3 * berat_badan + 679
# Menyesuaikan kebutuhan kalori dengan budget yang telah diinput
kebutuhan_kalori = kebutuhan_kalori * (berat_badan_tujuan / berat_badan)

def filter_alergi(data, alergi_makanan):
    for alergi in alergi_makanan:
        regex = re.compile(r'\b' + re.escape(alergi) + r'\b', flags=re.IGNORECASE)
        data = [item for item in data if not regex.search(item)]
    return data

if alergi.upper() == 'Y':
    jumlah_alergi = int(input("Masukkan jumlah alergi makanan: "))
    alergi_makanan = []
    for i in range(jumlah_alergi):
        alergi = input(f"Masukkan jenis makanan alergi ke-{i+1}: ")
        alergi_makanan.append(alergi)
    data = filter_alergi(data, alergi_makanan)

X = df[['energi_(kal)', 'Harga (Rp)']]

# Scaling data
scaler = MinMaxScaler()
scaled_data = scaler.fit_transform(X)

optics = OPTICS()

num_clusters = 7
gmm = GaussianMixture(n_components=num_clusters)
labels = gmm.fit_predict(scaled_data)

# Model untuk rekomendasi makanan
model = tf.keras.Sequential([
    tf.keras.layers.Dense(64, activation='relu', input_shape=(2,)),
    tf.keras.layers.Dense(32, activation='relu'),
    tf.keras.layers.Dense(16, activation='relu'),
    tf.keras.layers.Dense(num_clusters, activation='softmax')
])

model.compile(tf.keras.optimizers.Adam(learning_rate=0.0001),
              loss='sparse_categorical_crossentropy', metrics=['accuracy'])

model.fit(scaled_data, labels, epochs=1000, batch_size=128)

# Saving the model in .h5 format
model.save('recommendation_model_gmm.h5')

# Convert the model to TensorFlow Lite format (.tflite)
converter = tf.lite.TFLiteConverter.from_keras_model(model)
tflite_model = converter.convert()

# Save the TensorFlow Lite model to a file
with open('recommendation_model_gmm.tflite', 'wb') as f:
    f.write(tflite_model)

# Rekomendasi makanan berdasarkan berat badan, berat badan tujuan, dan budget
cluster = gmm.predict([[kebutuhan_kalori, budget_makan]])[0]
cluster_data = df[gmm.predict(scaled_data) == cluster]
recommended_foods = cluster_data[['makanan', 'jenis', 'energi_(kal)',
                                  'air_(g)', 'protein_(g)', 'lemak_(g)',
                                  'karbohidrat_(g)', 'serat_(g)', 'Harga (Rp)']].values.tolist()

# Output rekomendasi makanan untuk pengguna
# print("Rekomendasi makanan:")
# for food in recommended_foods:
#     print(f"Makanan: {food[0]}")
#     print(f"Jenis: {food[1]}")
#     print(f"Energi (kal): {food[2]}")
#     print(f"Harga: {food[3]}")
#     print("\n")

# Mendefinisikan setiap jenis makanan
jenis_makanan = ['makanan pokok', 'makanan tambahan', 'lauk', 'susu', 'sayur', 'buah']
recommended_foods = []

basic_recommendations = {
    'makanan pokok': 'Nasi Merah',
    'makanan tambahan': 'Keripik Tempe',
    'lauk': 'Tahu Telur',
    'sayur': 'Bayam Kukus',
    'buah': 'Semangka, segar',
    'susu': 'Susu sapi, segar'
}

# Memilih satu makanan dari setiap jenis
for jenis in jenis_makanan:
    jenis_data = df[df['jenis'] == jenis]['makanan'].tolist()

    # Memilih 1 sampel acak dari setiap jenis makanan (jika tersedia lebih dari 1)
    if len(jenis_data) > 0:
        recommended_food = np.random.choice(jenis_data)
        recommended_foods.append(recommended_food)
    else:
        recommended_foods.append(basic_recommendations[jenis])

# Output rekomendasi makanan
print("Rekomendasi makanan:")
for i, jenis in enumerate(jenis_makanan):
    print(f"{jenis.capitalize()}: {recommended_foods[i]}")

# Load the TFLite model and allocate tensors.
interpreter = tf.lite.Interpreter(model_path="recommendation_model_gmm.tflite")
interpreter.allocate_tensors()

# Mendefinisikan input_data untuk inferensi
input_data = np.array([[kebutuhan_kalori, budget_makan]], dtype=np.float32)
input_data = input_data.reshape((1, 2))

# Set input tensor dan invoke interpreter
input_index = interpreter.get_input_details()[0]["index"]
output_index = interpreter.get_output_details()[0]["index"]
interpreter.set_tensor(input_index, input_data)
interpreter.invoke()

# Mendapatkan hasil prediksi dari model
predictions = interpreter.get_tensor(output_index)

# Output hasil prediksi
print("Hasil prediksi:")
print(predictions)

# # Mendefinisikan rekomendasi makanan berdasarkan klaster
# klaster_rekomendasi = {
#     0: 'Nasi Merah',
#     1: 'Keripik Tempe',
#     2: 'Tahu Telur',
#     3: 'Bayam Kukus',
#     4: 'Semangka, segar',
#     5: 'Susu sapi, segar'
# }

# # Klaster terpilih berdasarkan hasil prediksi
# klaster_terpilih = np.argmax(predictions)

# # Menghubungkan jenis makanan dengan klaster rekomendasi
# jenis_to_klaster = {
#     'makanan pokok': 0,
#     'makanan tambahan': 1,
#     'lauk': 2,
#     'sayur': 3,
#     'buah': 4,
#     'susu': 5
# }

# # Membuat rekomendasi berdasarkan klaster yang dipilih
# recommended_foods = []
# for jenis in jenis_makanan:
#     klaster = jenis_to_klaster[jenis]
#     recommended_foods.append(klaster_rekomendasi[klaster])

# # Output rekomendasi makanan
# print("Rekomendasi makanan:")
# for i, jenis in enumerate(jenis_makanan):
#     print(f"{jenis.capitalize()}: {recommended_foods[i]}")

